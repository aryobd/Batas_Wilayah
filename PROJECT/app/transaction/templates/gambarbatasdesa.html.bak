

<!-- Leaflet -->
    <link rel="stylesheet" href="static/leaflet/leaflet.css">
    <!-- <link rel="stylesheet" href="static/leaflet/plugin/mapbox.css">  -->
    <link rel="stylesheet" href="static/leaflet/plugin/leaflet-geoman.css">
    <link rel="stylesheet" href="static/leaflet/plugin/leaflet-fullscreen.min.css">
    <link rel="stylesheet" href="static/leaflet/plugin/leaflet-controllayerstree.css">
 <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet-geosearch/3.6.0/geosearch.min.css"
        integrity="sha512-aXlinnCE2X7IVkXBPdOg1fEwQ6VjRO73q6B9Nm/g3qDGWdOlbcmnR8kbOPQpIdMNZ+UKUA90dL3dxprm8HD+ZQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
		
  <link rel="stylesheet" type="text/css" href="static/dataTables.bootstrap4.css">
<style>
    input.leaflet-control-layers-selector {
        opacity: 1 !important;
        position: static !important;
        left: 2px;
        margin-right: 4px;
    }
</style>
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<div class="col-lg-12">

    <div class="card card-outline">
        <div class="card-header pb-0">
            <table>
                <tr>
                    <td style="width: 100%;">
                        <div id="title-map" style="display: none;">
                            <div class="font-weight-bold badge badge-danger">ID : #123123</div>

                        </div>

                        <span class="font-weight-bold">Gambar Peta Desa : <span
                                id="gambarDesa-NamaDesa">{{nama_wilayah}}</span>
                        </span>
                        <div>
                    </td>
                    <td>
                        <table>
                            <tr>
                                <td>

                                    <button class="btn btn-info  tp-enabled mr-2 d-inline" data-toggle="tooltip"
                                        data-placement="top" title="Upload File"
                                        onclick="$('#modalPilihFile').modal('show')"><i class="mdi mdi-paperclip"></i>
                                    </button>
                                </td>
                                <td> <button id="{{id_button}}"
                                        class="btn btn-primary tp-enabled {{class_button}} d-inline"
                                        data-toggle="tooltip" data-placement="top" title="Simpan Data"
                                        onclick="$('#modalCUpload').modal('show')"><i
                                            class="mdi mdi-content-save"></i></button>

                                </td>
                            </tr>
                        </table>



                    </td>
                </tr>
            </table>


        </div>
        <div class="card-body">
			<div id="mapGambarBatasDesa" style="width: 100%;height: 60vh;"></div>
            
        </div>
    </div>
    <div id="modalCUpload" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog ">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="topModalLabel">Konfirmasi</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                </div>
                <div class="modal-body">
                    <h5>Lanjutkan Menyimpan Data ?</h5>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-dismiss="modal">Kembali</button>
                    <button type="button" class="btn btn-primary" onclick="saveData()">Ya</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div>
    <div id="modalPilihFile" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog ">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="topModalLabel">Upload File</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                </div>
                <div class="modal-body">
                    <div class="input-group mb-0">
                        <div class="custom-file">
                            <input type="file" class="custom-file-input" id="inputGroupFile01"
                                aria-describedby="inputGroupFileAddon01">
                            <label class="custom-file-label" for="inputGroupFile01">Pilih File</label>
                        </div>

                    </div>
                    <strong class="text-danger">* Dengan mengupload file akan menghapus data yang digambar
                        sebelumnya</strong>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-dismiss="modal">Kembali</button>
                    <button type="button" class="btn btn-primary" onclick="processFile()">Lanjutkan</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div>
</div>


 <!-- leaflet -->
    <script src="static/leaflet/leaflet-src.js"></script>
    
    <!-- <script rel="stylesheet" href="static/leaflet/plugin/mapbox.js">  -->
    <script src="static/leaflet/plugin/leaflet-geoman.min.js"></script>
    
    <script src="static/leaflet/plugin/leaflet-omnivore.min.js"></script>
    <script src="static/leaflet/plugin/leaflet-controllayerstree.js"></script>
    <script src="static/leaflet/plugin/leaflet-fullscreen.min.js"></script>
    <script src="https://unpkg.com/esri-leaflet@3.0.3/dist/esri-leaflet.js"
        integrity="sha512-kuYkbOFCV/SsxrpmaCRMEFmqU08n6vc+TfAVlIKjR1BPVgt75pmtU9nbQll+4M9PN2tmZSAgD1kGUCKL88CscA=="
        crossorigin=""></script>
	

<!-- Esri Leaflet Plugin: https://esri.github.io/esri-leaflet/ -->
<script src="https://unpkg.com/esri-leaflet@2.1.3/dist/esri-leaflet.js"
	integrity="sha512-pijLQd2FbV/7+Jwa86Mk3ACxnasfIMzJRrIlVQsuPKPCfUBCDMDUoLiBQRg7dAQY6D1rkmCcR8286hVTn/wlIg=="
	crossorigin=""></script>

<!-- ESRI Renderer Plugin: https://github.com/Esri/esri-leaflet-renderers -->
<!-- Renders feature layer using default symbology as defined by ArcGIS REST service -->
<!-- Currently doesn't work with ESRI cluster plugin -->
<script src="https://unpkg.com/esri-leaflet-renderers@2.0.6/dist/esri-leaflet-renderers.js"
	integrity="sha512-mhpdD3igvv7A/84hueuHzV0NIKFHmp2IvWnY5tIdtAHkHF36yySdstEVI11JZCmSY4TCvOkgEoW+zcV/rUfo0A=="
	crossorigin=""></script>
<!-- https://gist.github.com/zross/11258095/ -->
<script src="static/leaflet/esri-leaflet.js"></script>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-geosearch/3.6.0/bundle.min.js"
        integrity="sha512-KZpqcnEvMcuWWSz93xYb7/uXVs9Ak8LKqWoBa+Gyzd6kHwYp9rgo5U4N974Ty5dh2cjQGbxHwoyoPTRj8c51rA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>


<script>
    var editorDesaIdWilayah = "{{id_wilayah}}";
    var editorIdBatasDesa = "{{a_id_klaim_batas_desa}}";

    // feature leaflet dara data json
    var datageo

    var Esri_WorldImagery = L.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
        attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, ' +
            'AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
    });

    var Esri_DarkGreyCanvas = L.tileLayer(
        "http://{s}.sm.mapstack.stamen.com/" +
        "(toner-lite,$fff[difference],$fff[@23],$fff[hsl-saturation@20])/" +
        "{z}/{x}/{y}.png",
        {
            attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, ' +
                'NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community'
        }
    );

    var Apimaxbox = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
        maxZoom: 18,
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, ' +
            'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
        id: 'mapbox/light-v9',
        tileSize: 512,
        zoomOffset: -1
    });
    var layer_rbi = L.tileLayer('http://portal.ina-sdi.or.id/arcgis/rest/services/IGD/RupabumiIndonesia/MapServer/tile/{z}/{y}/{x}', {
        maxZoom: 18,
        attribution: ''

    });


    var layer_rbibaru = L.tileLayer('http://basemap.big.go.id/geoserver/gwc/service/tms/1.0.0/basemap_rbi:basemap@EPSG:3857@png/{z}/{x}/{-y}.png', {
        maxZoom: 18,
        attribution: ''

    });



    var layer_rbiesri = L.esri.tiledMapLayer({
        url: 'https://portal.ina-sdi.or.id/arcgis/rest/services/RBI/Basemap/MapServer',
        opacity: 1
    })
	
	/* var layer_indikatif = L.esri.tiledMapLayer({
        url: 'https://geoservices.big.go.id/rbi/rest/services/BATASWILAYAH/Administrasi_AR_KabKota_50K/MapServer',
        opacity: 1
    })
	*/
	var layer_indikatif = L.esri.dynamicMapLayer({
        url: 'https://geoservices.big.go.id/rbi/rest/services/BATASWILAYAH/Administrasi_AR_KelDesa_10K/MapServer',
        opacity: 1
    })

	
	
    var layer_rbivector = L.tileLayer({
        url: 'https://kspservices.big.go.id/satupeta/rest/services/Hosted/Rupabumi_Indonesia/VectorTileServer',
        opacity: 1
    })




    var OpenStreetMap_Mapnik = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    });

    var layersTree = [
        {
            label: 'Base Map',
            children: [
                { label: 'RBI BIG', layer: layer_rbi },
                { label: 'RBI BIG - OS', layer: layer_rbibaru },
                { label: 'RBI BIG - Esri', layer: layer_rbiesri },
				{ label: 'Satellite ESRI', layer: Esri_WorldImagery },
				{ label: 'Grey Canvas ESRI', layer: Esri_DarkGreyCanvas },
				{ label: 'Mapbox', layer: Apimaxbox },
					{ label: 'OpenStreetMap_Mapnik', layer: OpenStreetMap_Mapnik },
            ]
        }]

    var map = L.map('mapGambarBatasDesa', {
        layers: [OpenStreetMap_Mapnik],
        //pmIgnore: false,
       // maxZoom: 17,
        fullscreenControl: true,
        fullscreenControlOptions: {
            position: 'topleft'
        }
    }).on('load', onMapLoad).setView([-6.491857302, 106.848663298], 15);
	 //map.invalidateSize();
	function onMapLoad(){
	 $//('#mapGambarBatasDesa').css('width','99%');
	
	 //console.log('1')
	}
    
	/*
	var search = new GeoSearch.GeoSearchControl({
        showMarker: false, // optional: true|false  - default true
        showPopup: true,
        style: 'bar',
        searchLabel: 'Cari Alamat', autoComplete: true,
        autoCompleteDelay: 250,
        provider: new GeoSearch.AlgoliaProvider(),
    });

    map.addControl(search)
	*/
	
	
	
    map.on('geosearch/showlocation', function (result) {
        console.log(result)
    });
		var overlayMaps = {
			//"Indikatif": layer_indikatif
			label: 'Indikatif',
            children: [
                { label: 'Indikatif', layer: layer_indikatif },
               
            ]
		};
		
		
		
    var ctr = L.control.layers.tree(layersTree, overlayMaps, {
        //namedToggle: true,
        selectorBack: false,
        closedSymbol: '&#8862; &#x1f5c0;',
        openedSymbol: '&#8863; &#x1f5c1;',
        // collapseAll: 'Collapse all',
        // expandAll: 'Expand all',
        collapsed: true,
    }).addTo(map)

    // OpenStreetMap_Mapnik.addTo(map)


    map.pm.setLang('id')
    map.pm.addControls({
        position: 'topleft',
        drawPolyline: false,
        drawMarker: false,
        drawCircle: false,
        drawCircleMarker: false,
        drawRectangle: false,
        oneBlock: true
    });

    function removeAllLayer() {
        map.eachLayer(function (layer) {
            map.removeLayer(layer);
        });
    }


    omnivoreToMap = function (stringData = "", type = "geojson") {
        try {
            removeAllLayer()
            let readByOmnivore = ["kml", "gpx", "topojson"]
            if (readByOmnivore.includes(type)) {
                datageo = omnivore[type].parse(stringData)
                    .on('ready', function () {
                        console.log('loaded');
                    }).on('error', function (er) {
                        // fired if the layer can't be loaded over AJAX
                        // or can't be parsed
                        // console.log(er)
                    })
                    .addTo(map);
                map.fitBounds(datageo.getBounds())
                // map.setZoom(18)
            } else if (type == "geojson") {
                // console.log(stringData)
                datageo = L.geoJSON(JSON.parse(stringData))
                    .addTo(map);
                map.fitBounds(datageo.getBounds())
                // map.setZoom(18)
            }
            $(".modal").modal("hide")
            resetFileInput()
        } catch (error) {
            // console.log(error)
            showNotificationParam("error", error)
        }


    }
    resetFileInput = function(){
        $("#inputGroupFile01").val("")
        $("#inputGroupFile01 + label").html("Pilih File")
    }
    $("#inputGroupFile01").on("change", function () {
        let file = $("#inputGroupFile01")[0].files[0];
        if (typeof file != undefined)
            $("#inputGroupFile01 + label").html(file.name)
    })

    processFile =  async function () {
        const allowedFileExt = ["geojson", "kml", "wkt", "gpx", "topojson"]
        let file = $("#inputGroupFile01")[0].files[0];
        // console.log(file)
        let [name, ext] = getNameAndExt(file.name)
        ext = ext.toLowerCase();
        // console.log(name, ext)
        if(allowedFileExt.includes(ext)){
            const reader = new FileReader()
            reader.onload = event => {
                let stringData = event.target.result;
                omnivoreToMap(stringData, ext)
            } // desired file content
            reader.onerror = error => reject(error)
            reader.readAsText(file)
        }else if(ext == "kmz"){
            let unzip = await (new zip.ZipReader(new zip.BlobReader(file))).getEntries();
			// console.log(unzip)
            // let numberKmlFile = 0;
            let kmlEntry = []
            unzip.forEach(entry=>{
                let [name,ext] = getNameAndExt(entry.filename);
                if(ext == "kml") kmlEntry.push(entry);
                
            })
            if(kmlEntry.length == 1){
                let stringData = await kmlEntry[0].getData(new zip.TextWriter())
                // console.log(stringData)
                omnivoreToMap(stringData,"kml")
            }else if(kmlEntry.length == 0){
                showNotificationParam("error","Tidak ada file kml pada file")
            }else{
                showNotificationParam("error","Terdapat lebih dari 1 file kml")
          
            }
        }else{
            resetFileInput()
            showNotificationParam("error","Ektensi file tidak diizinkan")
        }
    }

    function getNameAndExt(namefile){
        let arrName = namefile.split(".")
        let ext = arrName.pop();
        let name = "";
        arrName.forEach(element => {
            name+=element
        });
        return [name,ext]
    }
    // map.pm.disableDraw();

    if (editorIdBatasDesa.length == 36) {
        let geodata {{ geodata }}
		// console.log(geodata)
		if (typeof geodata == "object") {
			datageo = L.geoJSON(geodata, { pmIgnore: false }).addTo(map);
			// console.log(datageo.getBounds())
			map.fitBounds(datageo.getBounds())
			map.setZoom(16)
		}
		$("#title-map>div").html("ID : " + editorIdBatasDesa)
		$("#title-map").show()
    }
    getAllDrawDataAsGeoJson = function () {
        let data = map.pm.getGeomanDrawLayers(true).toGeoJSON()
        return data
    }
    saveData = async () => {
        let geom = getAllDrawDataAsGeoJson();
        if (editorIdBatasDesa.length == 36) {
            // console.log(datageo.toGeoJSON())
            // return
            geom = datageo.toGeoJSON()
        }

        // le
        // console.log(geom)
        if (geom.features.length == 1) {
            let params = {
                id_wilayah: editorDesaIdWilayah,
                id_klaim_batas_desa: editorIdBatasDesa,
                geom: geom.features[0]
            }
            execData("transaction/klaimbatasdesa/upload", params, (resp) => {
                if (resp.result) {
                    $('#modalCUpload').on('hidden.bs.modal', function (event) {
                        execURL("transaction/klaimbatasdesa/editor?id_wilayah=" + resp.id_wilayah + "&gid=" + resp.insert_id)
                    })
                    $("#modalCUpload").modal("hide")
                }
            })
        } else if (geom.features.length == 0) {
            showNotificationParam("error", "Harap gambar polygon pada peta editor")
        } else {
            showNotificationParam("error", "Terdapat lebih dari satu polygon pada editor")

        }

    }
    //map.invalidateSize();
    $(".tp-enabled").tooltip('enable')
	setTimeout(function(){ map.invalidateSize()}, 400);
</script>